!!!!!!!!!!!!!!!
!! ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

number = sg pl du sp;
gender = m f mf;
tense = pres past fut ifi pri fti pret cni ;
person = p1 p2 p3 ;
case = nom gen acc par ine ela ill ade abl all loc com abe tra ess ;
sem = sem_dummytag ;
mood = indic cond pot imp pri past cni ;
comparison = pst comp sup ;
clitic = qst foc_uv ;
tviv = tv iv  ;
neg = neg conneg ;
prntype = pers dem ind rel itg ;
ptcp = pp pprs prfprc ;
ntype = nomag ;

ones = oht창 1 ;
twosixes = kyehti kulm창 nelji vitt창 kutt창 2 3 4 5 6 ;

!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

np: _.number.case.clitic;
n: _.ntype.number.case.clitic;
n_par: _.case;   !! hack to get partitive without number tag?
prn: _.prntype.person.number.case;
adj: _.number.case;
adj_attr: _.<attr>;
det: _.prntype.number.case;
num: _.number.case;
vaux: _.tviv.neg.mood.tense.person.number;
vblex: _.tviv.neg.mood.tense.person.number;
vblex_actio: _.tviv.<actio>.case;
vblex_inf: _.tviv.<inf>;
vblex_ptcp: _.tviv.ptcp;
vblex_conneg: _.tviv.mood.tense.neg;

! singletons
NUM: _;
N: _;
A: _;
V: _;
PRN: _;

! phrases
VP: _;
NP: _;
NUMP: _;

!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

tense > tense : pri pres, past pret, cni pres ;
case > case : ine loc , ela loc, abl loc, ade loc, all ill, tra ess, par acc;
mood > mood : pri indic, past indic, cni cond ;
ptcp > ptcp : pp prfprc, pprs prsprc;

!!!!!!!!!!!!!!!
!! MACROS
!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

NUMP -> num.*.nom n.*.par ?(1.lem in ones) { 1 _ 2 } |
        num.*.nom n.*.par ?(1.lem in twosixes) { 1 _ 2[case=gen] } |
        num.*.nom n.*.par { 1 _ 2(n_par) } ;


V -> vblex.*.infa { 1(vblex_inf) } |
     vblex.*.infma { 1(vblex_actio)[case=ess] } |
     ei@vaux { 1[mood=indic,tviv=iv,neg=neg] } |
     vblex.*.conneg { 1(vblex_conneg) } |
     vaux.*.conneg { 1(vblex_conneg) } |
     vblex.*.pp.* { 1(vblex_ptcp) } |
     vblex.*.pprs.* { 1(vblex_ptcp) } |
     vblex ?(1.neg not = conneg) { 1 } |
     vaux ?(1.neg not = conneg) { 1 } ;
A -> adj { 1[case=(if (1.case = par) nom else 1.case)] } ;
N -> n { 1 } | 
     np { 1 } ;
PRN -> prn { 1[number=(if (1.number = sp) sg else 1.number)] }  |
       se@det { 1 } ;
NUM -> num { 1 } |
       yksi@det { 1 } ;

! Resources:
! https://wiki.apertium.org/wiki/Apertium-recursive
! https://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! https://wiki.apertium.org/wiki/Apertium-recursive/Cookbook
