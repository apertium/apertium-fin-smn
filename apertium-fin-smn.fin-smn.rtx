!!!!!!!!!!!!!!!
!! ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

number = sg pl du sp;
gender = m f mf;
tense = pres past fut ifi pri fti pret ;
person = p1 p2 p3 ;
case = nom gen acc par ine ela ill ade abl all loc com abe tra ess ;
sem = sem_dummytag ;
mood = indic cond pot imp pri past ;
comparison = pst comp sup ;
clitic = qst foc_uv ;
tviv = tv iv ;

ones = oht창 1 ;
twosixes = kyehti kulm창 nelji vitt창 kutt창 2 3 4 5 6 ;

!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

n: _.number.case.clitic;
n_par: _.case;   !! hack to get partitive without number tag?
adj: _.number.case;
adj_attr: _.<attr>;
num: _.number.case;
vblex: _.tviv.mood.tense.person.number;
vblex_inf: _.tviv.<inf>;

! singletons
NUM: _;
N: _;
A: _;
V: _;

! phrases
NP: _;
NUMP: _;

!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

tense > tense : pri pres, past pret ;
case > case : ine loc ;
mood > mood : pri indic, past indic ;

!!!!!!!!!!!!!!!
!! MACROS
!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

NUMP -> num.*.nom n.*.par ?(1.lem in ones) { 1 _ 2 } |
        num.*.nom n.*.par ?(1.lem in twosixes) { 1 _ 2[case=gen] } |
        num.*.nom n.*.par { 1 _ 2(n_par) } ;

V -> vblex.*.infa { 1(vblex_inf) } | 
     vblex { 1 } ;
A -> adj { 1 } ;
N -> n.*.par { 1(n_par) } |
     n { 1 } ;
NUM -> num { 1 } ;

! Resources:
! https://wiki.apertium.org/wiki/Apertium-recursive
! https://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! https://wiki.apertium.org/wiki/Apertium-recursive/Cookbook
